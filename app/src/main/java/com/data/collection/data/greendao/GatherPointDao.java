package com.data.collection.data.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GATHER_POINT".
*/
public class GatherPointDao extends AbstractDao<GatherPoint, Long> {

    public static final String TABLENAME = "GATHER_POINT";

    /**
     * Properties of entity GatherPoint.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property Latitude = new Property(3, double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(4, double.class, "longitude", false, "LONGITUDE");
        public final static Property Altitude = new Property(5, double.class, "altitude", false, "ALTITUDE");
        public final static Property GatherTime = new Property(6, String.class, "gatherTime", false, "GATHER_TIME");
        public final static Property Report = new Property(7, String.class, "report", false, "REPORT");
        public final static Property UploadedTime = new Property(8, String.class, "uploadedTime", false, "UPLOADED_TIME");
        public final static Property Comments = new Property(9, String.class, "comments", false, "COMMENTS");
        public final static Property GatherInfo = new Property(10, String.class, "gatherInfo", false, "GATHER_INFO");
        public final static Property PicPath1 = new Property(11, String.class, "picPath1", false, "PIC_PATH1");
        public final static Property PicPath2 = new Property(12, String.class, "picPath2", false, "PIC_PATH2");
        public final static Property PicPath3 = new Property(13, String.class, "picPath3", false, "PIC_PATH3");
        public final static Property IsUploaded = new Property(14, boolean.class, "isUploaded", false, "IS_UPLOADED");
    }


    public GatherPointDao(DaoConfig config) {
        super(config);
    }
    
    public GatherPointDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GATHER_POINT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE\" TEXT NOT NULL ," + // 1: type
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"LATITUDE\" REAL NOT NULL ," + // 3: latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 4: longitude
                "\"ALTITUDE\" REAL NOT NULL ," + // 5: altitude
                "\"GATHER_TIME\" TEXT UNIQUE ," + // 6: gatherTime
                "\"REPORT\" TEXT," + // 7: report
                "\"UPLOADED_TIME\" TEXT," + // 8: uploadedTime
                "\"COMMENTS\" TEXT," + // 9: comments
                "\"GATHER_INFO\" TEXT," + // 10: gatherInfo
                "\"PIC_PATH1\" TEXT," + // 11: picPath1
                "\"PIC_PATH2\" TEXT," + // 12: picPath2
                "\"PIC_PATH3\" TEXT," + // 13: picPath3
                "\"IS_UPLOADED\" INTEGER NOT NULL );"); // 14: isUploaded
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GATHER_POINT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GatherPoint entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getType());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
        stmt.bindDouble(4, entity.getLatitude());
        stmt.bindDouble(5, entity.getLongitude());
        stmt.bindDouble(6, entity.getAltitude());
 
        String gatherTime = entity.getGatherTime();
        if (gatherTime != null) {
            stmt.bindString(7, gatherTime);
        }
 
        String report = entity.getReport();
        if (report != null) {
            stmt.bindString(8, report);
        }
 
        String uploadedTime = entity.getUploadedTime();
        if (uploadedTime != null) {
            stmt.bindString(9, uploadedTime);
        }
 
        String comments = entity.getComments();
        if (comments != null) {
            stmt.bindString(10, comments);
        }
 
        String gatherInfo = entity.getGatherInfo();
        if (gatherInfo != null) {
            stmt.bindString(11, gatherInfo);
        }
 
        String picPath1 = entity.getPicPath1();
        if (picPath1 != null) {
            stmt.bindString(12, picPath1);
        }
 
        String picPath2 = entity.getPicPath2();
        if (picPath2 != null) {
            stmt.bindString(13, picPath2);
        }
 
        String picPath3 = entity.getPicPath3();
        if (picPath3 != null) {
            stmt.bindString(14, picPath3);
        }
        stmt.bindLong(15, entity.getIsUploaded() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GatherPoint entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getType());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
        stmt.bindDouble(4, entity.getLatitude());
        stmt.bindDouble(5, entity.getLongitude());
        stmt.bindDouble(6, entity.getAltitude());
 
        String gatherTime = entity.getGatherTime();
        if (gatherTime != null) {
            stmt.bindString(7, gatherTime);
        }
 
        String report = entity.getReport();
        if (report != null) {
            stmt.bindString(8, report);
        }
 
        String uploadedTime = entity.getUploadedTime();
        if (uploadedTime != null) {
            stmt.bindString(9, uploadedTime);
        }
 
        String comments = entity.getComments();
        if (comments != null) {
            stmt.bindString(10, comments);
        }
 
        String gatherInfo = entity.getGatherInfo();
        if (gatherInfo != null) {
            stmt.bindString(11, gatherInfo);
        }
 
        String picPath1 = entity.getPicPath1();
        if (picPath1 != null) {
            stmt.bindString(12, picPath1);
        }
 
        String picPath2 = entity.getPicPath2();
        if (picPath2 != null) {
            stmt.bindString(13, picPath2);
        }
 
        String picPath3 = entity.getPicPath3();
        if (picPath3 != null) {
            stmt.bindString(14, picPath3);
        }
        stmt.bindLong(15, entity.getIsUploaded() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GatherPoint readEntity(Cursor cursor, int offset) {
        GatherPoint entity = new GatherPoint( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.getDouble(offset + 3), // latitude
            cursor.getDouble(offset + 4), // longitude
            cursor.getDouble(offset + 5), // altitude
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // gatherTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // report
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // uploadedTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // comments
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // gatherInfo
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // picPath1
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // picPath2
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // picPath3
            cursor.getShort(offset + 14) != 0 // isUploaded
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GatherPoint entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLatitude(cursor.getDouble(offset + 3));
        entity.setLongitude(cursor.getDouble(offset + 4));
        entity.setAltitude(cursor.getDouble(offset + 5));
        entity.setGatherTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setReport(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUploadedTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setComments(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGatherInfo(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPicPath1(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPicPath2(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPicPath3(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIsUploaded(cursor.getShort(offset + 14) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GatherPoint entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GatherPoint entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GatherPoint entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
