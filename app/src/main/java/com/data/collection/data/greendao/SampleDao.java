package com.data.collection.data.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SAMPLE".
*/
public class SampleDao extends AbstractDao<Sample, Long> {

    public static final String TABLENAME = "SAMPLE";

    /**
     * Properties of entity Sample.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Pointid = new Property(1, Long.class, "pointid", false, "POINTID");
        public final static Property CheckTime = new Property(2, String.class, "checkTime", false, "CHECK_TIME");
        public final static Property Check = new Property(3, String.class, "check", false, "CHECK");
    }


    public SampleDao(DaoConfig config) {
        super(config);
    }
    
    public SampleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SAMPLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"POINTID\" INTEGER NOT NULL ," + // 1: pointid
                "\"CHECK_TIME\" TEXT UNIQUE ," + // 2: checkTime
                "\"CHECK\" TEXT);"); // 3: check
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SAMPLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Sample entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPointid());
 
        String checkTime = entity.getCheckTime();
        if (checkTime != null) {
            stmt.bindString(3, checkTime);
        }
 
        String check = entity.getCheck();
        if (check != null) {
            stmt.bindString(4, check);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Sample entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPointid());
 
        String checkTime = entity.getCheckTime();
        if (checkTime != null) {
            stmt.bindString(3, checkTime);
        }
 
        String check = entity.getCheck();
        if (check != null) {
            stmt.bindString(4, check);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Sample readEntity(Cursor cursor, int offset) {
        Sample entity = new Sample( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // pointid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // checkTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // check
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Sample entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPointid(cursor.getLong(offset + 1));
        entity.setCheckTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCheck(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Sample entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Sample entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Sample entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
