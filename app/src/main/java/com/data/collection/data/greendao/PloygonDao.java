package com.data.collection.data.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLOYGON".
*/
public class PloygonDao extends AbstractDao<Ploygon, Long> {

    public static final String TABLENAME = "PLOYGON";

    /**
     * Properties of entity Ploygon.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property IsLine = new Property(2, boolean.class, "isLine", false, "IS_LINE");
        public final static Property PointCount = new Property(3, int.class, "pointCount", false, "POINT_COUNT");
        public final static Property Comments = new Property(4, String.class, "comments", false, "COMMENTS");
        public final static Property MeasureResult = new Property(5, double.class, "measureResult", false, "MEASURE_RESULT");
        public final static Property Time = new Property(6, String.class, "time", false, "TIME");
    }

    private DaoSession daoSession;


    public PloygonDao(DaoConfig config) {
        super(config);
    }
    
    public PloygonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLOYGON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"IS_LINE\" INTEGER NOT NULL ," + // 2: isLine
                "\"POINT_COUNT\" INTEGER NOT NULL ," + // 3: pointCount
                "\"COMMENTS\" TEXT," + // 4: comments
                "\"MEASURE_RESULT\" REAL NOT NULL ," + // 5: measureResult
                "\"TIME\" TEXT NOT NULL );"); // 6: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLOYGON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Ploygon entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getIsLine() ? 1L: 0L);
        stmt.bindLong(4, entity.getPointCount());
 
        String comments = entity.getComments();
        if (comments != null) {
            stmt.bindString(5, comments);
        }
        stmt.bindDouble(6, entity.getMeasureResult());
        stmt.bindString(7, entity.getTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Ploygon entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getIsLine() ? 1L: 0L);
        stmt.bindLong(4, entity.getPointCount());
 
        String comments = entity.getComments();
        if (comments != null) {
            stmt.bindString(5, comments);
        }
        stmt.bindDouble(6, entity.getMeasureResult());
        stmt.bindString(7, entity.getTime());
    }

    @Override
    protected final void attachEntity(Ploygon entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Ploygon readEntity(Cursor cursor, int offset) {
        Ploygon entity = new Ploygon( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getShort(offset + 2) != 0, // isLine
            cursor.getInt(offset + 3), // pointCount
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // comments
            cursor.getDouble(offset + 5), // measureResult
            cursor.getString(offset + 6) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Ploygon entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsLine(cursor.getShort(offset + 2) != 0);
        entity.setPointCount(cursor.getInt(offset + 3));
        entity.setComments(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMeasureResult(cursor.getDouble(offset + 5));
        entity.setTime(cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Ploygon entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Ploygon entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Ploygon entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
