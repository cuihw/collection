package com.data.collection.data.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SIMPLE_POINT".
*/
public class SimplePointDao extends AbstractDao<SimplePoint, Long> {

    public static final String TABLENAME = "SIMPLE_POINT";

    /**
     * Properties of entity SimplePoint.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Index = new Property(1, int.class, "index", false, "INDEX");
        public final static Property Latitude = new Property(2, String.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(3, String.class, "longitude", false, "LONGITUDE");
        public final static Property Height = new Property(4, String.class, "height", false, "HEIGHT");
        public final static Property PloygonId = new Property(5, long.class, "ploygonId", false, "PLOYGON_ID");
    }

    private Query<SimplePoint> ploygon_PointsQuery;

    public SimplePointDao(DaoConfig config) {
        super(config);
    }
    
    public SimplePointDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SIMPLE_POINT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"INDEX\" INTEGER NOT NULL ," + // 1: index
                "\"LATITUDE\" TEXT NOT NULL ," + // 2: latitude
                "\"LONGITUDE\" TEXT NOT NULL ," + // 3: longitude
                "\"HEIGHT\" TEXT NOT NULL ," + // 4: height
                "\"PLOYGON_ID\" INTEGER NOT NULL );"); // 5: ploygonId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SIMPLE_POINT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SimplePoint entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIndex());
        stmt.bindString(3, entity.getLatitude());
        stmt.bindString(4, entity.getLongitude());
        stmt.bindString(5, entity.getHeight());
        stmt.bindLong(6, entity.getPloygonId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SimplePoint entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIndex());
        stmt.bindString(3, entity.getLatitude());
        stmt.bindString(4, entity.getLongitude());
        stmt.bindString(5, entity.getHeight());
        stmt.bindLong(6, entity.getPloygonId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SimplePoint readEntity(Cursor cursor, int offset) {
        SimplePoint entity = new SimplePoint( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // index
            cursor.getString(offset + 2), // latitude
            cursor.getString(offset + 3), // longitude
            cursor.getString(offset + 4), // height
            cursor.getLong(offset + 5) // ploygonId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SimplePoint entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIndex(cursor.getInt(offset + 1));
        entity.setLatitude(cursor.getString(offset + 2));
        entity.setLongitude(cursor.getString(offset + 3));
        entity.setHeight(cursor.getString(offset + 4));
        entity.setPloygonId(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SimplePoint entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SimplePoint entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SimplePoint entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "points" to-many relationship of Ploygon. */
    public List<SimplePoint> _queryPloygon_Points(long ploygonId) {
        synchronized (this) {
            if (ploygon_PointsQuery == null) {
                QueryBuilder<SimplePoint> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PloygonId.eq(null));
                ploygon_PointsQuery = queryBuilder.build();
            }
        }
        Query<SimplePoint> query = ploygon_PointsQuery.forCurrentThread();
        query.setParameter(0, ploygonId);
        return query.list();
    }

}
